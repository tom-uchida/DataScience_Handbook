# --------------------------------------------
# ----- 2.1.1 単なる整数ではないPythonの整数 -----
# --------------------------------------------
# // C code 
# int result = 0;
# for (int i = 0; i < 100; i++) {
#   result += i;
# }

# Python code
result = 0
for i in range(100):
    result += i

# Cでは，各変数のデータ型が明示的に宣言されているが，
# Pythonでは，型が動的に推測される．

# Cの整数は，基本的に，整数値を格納するメモリ内の位置のラベル．
# Pythonの整数は，整数値を格納するデータを含む，すべてのPythonオブジェクト情報を含むメモリへのポインタ．





# -----------------------------------------------
# ----- 2.1.2 単なるリストではないPythonのリスト -----
# -----------------------------------------------
# 整数のリスト
L = list(range(10)) 
# L → [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# type(L[0]) → int





# ----------------------------------
# ----- 2.1.3 Pythonの固定型配列 -----
# ----------------------------------
# array
import array
L = list(range(10))
A = array.array('i', L) # 'i'は配列の要素が整数(Integer)を指定するため
# A → array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

# Pythonの配列オブジェクトは，配列ベースのデータを効率的に格納するが，
# NumPyは，そのデータに対する効率的な「操作」を追加する．





# -----------------------------------------
# ----- 2.1.4 Pythonのリストから作る配列 -----
# -----------------------------------------
# NumPy
import numpy as np
# integer array: 整数配列
np.array([1, 4, 2, 5, 3])
# → array([1, 4, 2, 5, 3])

# Pythonリストとは異なり，NumPy配列の要素はすべて同じ型という制約がある．
# 配列の型を明示的に設定する場合は，dtypeキーワードを使用する．
np.array([1, 2, 3, 4], dtype = 'float32')
# → array([1., 2., 3., 4.], dtype = 'float32')

# Pythonリストとは異なり，NumPy配列は多次元にすることも可能．
# リストのリストを使用して多次元配列を初期化できる．
np.array([range(i, i+3) for i in [2, 4, 6]])
# → array( [ [2, 3, 4],
#            [4, 5, 6],
#            [7, 8, 9] ])





# --------------------------
# ----- 2.1.5 配列の構築 -----
# --------------------------
# 特に大きな配列の場合，NumPyに組み込まれた関数を使用して配列を最初から作成するほうが効率的．

np.linspace(0, 1, 5)                # 0と1の間に均等に配置された5つの値の配列を作る
# → array([0. , 0.25, 0.5, 0.75, 1. ])

np.random.random((3, 3))            # 0と1の間に均一に分布したランダムな値の3行3列の配列を作る
np.random.randint(0, 10, (3, 3))    # 区間[0, 10)のランダムな整数で3行3列の配列を作る





# -----------------------------------
# ----- 2.1.6 NumPyの標準データ型 -----
# -----------------------------------
