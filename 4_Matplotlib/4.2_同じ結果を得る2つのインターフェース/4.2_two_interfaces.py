# ---------------------------------------------
# ----- 4.2 同じ結果を得る2つのインターフェース -----
# ---------------------------------------------
# Matplotlinの機能で混乱しがちなのは，Matplotlibが2つのインターフェース，
# つまり利便性の高いMATLABスタイルで状態を持つインターフェースと，
# より強力なオブジェクト指向インターフェースを提供している点．



# ----------------------------------------------
# ----- 4.2.0.1 MATLABスタイルインターフェース -----
# ----------------------------------------------
# MatplotlibはもともとMATLABユーザに対するPython上の代替手段として作られている．
# MATLABスタイルのツールは，pyplot(plt)インターフェースで提供されている．
import matplotlib.pyplot as plt
import numpy as np
x = np.linspace(0, 10, 100)

plt.figure() # figureを作成する

plt.subplot(2, 1, 1) # (rows, colums, panel number)
plt.plot(x, np.sin(x))

plt.subplot(2, 1, 2) # (rows, colums, panel number)
plt.plot(x, np.cos(x))

# このインターフェースは状態を持ち，
# すべてのpltコマンドが適用される「現在の」図(Figure)と座標軸(Axes)が維持されていることに注意が必要．
# こうした状態を持つインターフェースは，簡単なプロットでは高速かつ便利だが，問題に陥りやすいものでもある．
# 例えば，2番めのグラフを作成した後，最初のグラフに何かを追加するにはどうすればよいのでしょうか．
# これはMATLAB形式のインターフェースでも可能な操作だが，多少込み入ったものとなる．
# 幸いにも，よりよい方法が提供されている．



# -----------------------------------------------
# ----- 4.2.0.2 オブジェクト指向インターフェース -----
# -----------------------------------------------
# オブジェクト指向のインターフェースは，こうした複雑な状況や，図を細かく制御したい場合に利用できる．
# オブジェクト指向のインターフェースは「アクティブな」現在の図や座標軸の概念に依存するのではなく，
# 明示的なFigureオブジェクトとAxesオブジェクトに対するメソッドとしてプロット関数が定義される．
fig, ax = plt.subplots(2)

ax[0].plot(x, np.sin(x))
ax[1].plot(x, np.cos(x))

plt.show()

# 単純なプロットでは，使用するスタイルの選択は好みの問題だが，
# プロットが複雑になるに連れてオブジェクト指向のアプローチが必要になる．