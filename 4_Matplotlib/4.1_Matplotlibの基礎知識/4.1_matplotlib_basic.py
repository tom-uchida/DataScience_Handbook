# ----------------------------------
# ----- 4.1 Matplotlibの基礎知識 -----
# ----------------------------------
# --------------------------------------
# ----- 4.1.1 matplotlibのインポート -----
# --------------------------------------
import matplotlib as mpl
import matplotlib.pyplot as plt





# ------------------------------
# ----- 4.1.2 スタイルの設定 -----
# ------------------------------
plt.style.use('classic')



# -----------------------------------------------------------
# ----- 4.1.3 show()するかshow()しないか? 描画を表示する方法 -----
# -----------------------------------------------------------
# ------------------------------------------------
# ----- 4.1.3.1 Pythonスクリプトからプロットする -----
# ------------------------------------------------
# PythonスクリプトでMatplotlibを使用している場合，関数plt.show()を使う．
# plt.show()コマンドはPythonセッションごとに1回だけ使用する必要があり，
# スクリプトの最後に配置されるべき点に注意が必要．
# 複数のshow()コマンドの実行は，バックエンド依存の予測不能な動作を引き起こすため，避けなければならない．



# ---------------------------------------------
# ----- 4.1.3.2 IPythonシェルからプロットする -----
# ---------------------------------------------



# -------------------------------------------------
# ----- 4.1.3.3 IPython notebookからプロットする -----
# -------------------------------------------------





# ----------------------------------------
# ----- 4.1.4 プロット結果のファイル保存 -----
# ----------------------------------------
# Matplotlibの優れた特徴の1つは，さまざまな形式でイメージを保存できる機能．
# savefig()コマンドを使用して描画結果を保存することができる．
import numpy as np
x = np.linspace(0, 10, 100)
fig = plt.figure()
plt.plot(x, np.sin(x), '-')
plt.plot(x, np.cos(x), '--')

fig.savefig('my_figure.png')
# こうして，現在のディレクトリにmy_figure.pngというファイルが作られる．


# canvasオブジェクトのメソッドを使用して，
# システムでサポートされているファイル形式のリストが得られる．
fig.canvas.get_supported_filetypes()